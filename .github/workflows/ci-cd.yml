name: CI/CD Pipeline - Build, Test, Release & Deploy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Type de bump de version (major, minor, patch)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'
      create_release:
        description: 'Cr√©er une release GitHub apr√®s le bump'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: '21'
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120

jobs:
  version-bump:
    name: Maven Version Bump
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      tag_name: ${{ steps.bump_version.outputs.tag_name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Configure Maven settings for GitHub Packages
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                        https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "Current version: ${CURRENT_VERSION}"
      
      - name: Bump version with Maven
        id: bump_version
        run: |
          BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          echo "Bump type: ${BUMP_TYPE}"
          
          # Retirer le -SNAPSHOT si pr√©sent
          ./mvnw versions:set -DremoveSnapshot -DgenerateBackupPoms=false
          
          # Effectuer le bump selon le type
          case ${BUMP_TYPE} in
            major)
              ./mvnw build-helper:parse-version versions:set \
                -DnewVersion=\${parsedVersion.nextMajorVersion}.0.0 \
                -DgenerateBackupPoms=false
              ;;
            minor)
              ./mvnw build-helper:parse-version versions:set \
                -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0 \
                -DgenerateBackupPoms=false
              ;;
            patch)
              ./mvnw build-helper:parse-version versions:set \
                -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} \
                -DgenerateBackupPoms=false
              ;;
          esac
          
          # R√©cup√©rer la nouvelle version
          NEW_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          TAG_NAME="v${NEW_VERSION}"
          
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          
          echo "New version: ${NEW_VERSION}"
          echo "Tag name: ${TAG_NAME}"
      
      - name: Commit version bump
        run: |
          git add pom.xml
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }} [skip ci]"
          git push origin main
      
      - name: Create and push tag
        if: github.event.inputs.create_release == 'true'
        run: |
          git tag -a ${{ steps.bump_version.outputs.tag_name }} -m "Release version ${{ steps.bump_version.outputs.new_version }}"
          git push origin ${{ steps.bump_version.outputs.tag_name }}
      
      - name: Summary
        run: |
          echo "## ‚úÖ Version bump r√©ussi!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Type de bump**: ${{ github.event.inputs.version_bump }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version pr√©c√©dente**: ${{ steps.current_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Nouvelle version**: ${{ steps.bump_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag cr√©√©**: ${{ steps.bump_version.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event.inputs.create_release }}" == "true" ]]; then
            echo "üöÄ La release sera cr√©√©e automatiquement par le workflow CI/CD." >> $GITHUB_STEP_SUMMARY
          fi

  build-and-test:
    name: Build and Test
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.create_release != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # R√©cup√®re tout l'historique pour les tags
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Configure Maven settings for GitHub Packages
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                        https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF
      
      - name: Compile application
        run: ./mvnw clean compile -B -V
      
      - name: Package application
        run: ./mvnw package -Dmaven.test.skip=true -B
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/*.jar
            target/*.jar.original
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: build-and-test
    if: |
      (startsWith(github.ref, 'refs/tags/v') || 
       (github.event_name == 'workflow_dispatch' && inputs.create_release == true))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(grep -oP '<version>\K[^<]+' pom.xml | head -1)
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts
      
      - name: Create source archive
        run: |
          git archive --format=zip --output=starter-api-${{ steps.get_version.outputs.version }}-sources.zip HEAD
          git archive --format=tar.gz --output=starter-api-${{ steps.get_version.outputs.version }}-sources.tar.gz HEAD
      
      - name: Generate changelog
        id: changelog
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
            if [ -z "$PREVIOUS_TAG" ]; then
              CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
            else
              CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
            fi
          else
            CHANGELOG=$(git log -10 --pretty=format:"- %s (%h)" --no-merges)
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## üöÄ Release ${{ steps.get_version.outputs.version }}
            
            ### üìù Changelog
            ${{ steps.changelog.outputs.changelog }}
            
            ### üì¶ Artifacts
            - **JAR compil√©**: `starter-${{ steps.get_version.outputs.version }}.jar`
            - **Sources**: `starter-api-${{ steps.get_version.outputs.version }}-sources.zip`
            - **Image Docker**: `ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}`
            
            ### üîß Configuration requise
            - Java 21+
            - MySQL 8.0+
            
            ### üìö Documentation
            Consultez le [README](https://github.com/${{ github.repository }}/blob/main/README.md) pour plus d'informations.
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'SNAPSHOT') || contains(steps.get_version.outputs.version, 'RC') }}
          files: |
            ./artifacts/*.jar
            ./starter-api-${{ steps.get_version.outputs.version }}-sources.zip
            ./starter-api-${{ steps.get_version.outputs.version }}-sources.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build-push:
    name: Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./target
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Generate SBOM (Software Bill of Materials)
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: cyclonedx-json
          output-file: sbom.json
      
      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
          retention-days: 90

  security-scan:
    name: Security Vulnerability Scan
    needs: docker-build-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deployment-info:
    name: Display Deployment Information
    needs: [create-release, docker-build-push]
    if: always() && (needs.create-release.result == 'success' || needs.docker-build-push.result == 'success')
    runs-on: ubuntu-latest
    
    steps:
      - name: Display deployment info
        run: |
          echo "## üéâ D√©ploiement r√©ussi!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Image Docker disponible" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Lancer l'application" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "### üìã Release cr√©√©e" >> $GITHUB_STEP_SUMMARY
            echo "Version: ${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi
